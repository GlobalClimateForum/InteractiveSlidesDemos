function introduction(pmodel::PresentationModel, params::Dict, slides::Vector{Slide})

@titleslide(
    h1("InteractiveSlides.jl"), 
    """<br><p>Hello team $(params[:team_id]) !</p>
    <p>Use arrow keys to navigate, and "m" to expand/collapse the menu.</p>""", 
)

#As you can see above, you can directly write html strings (which may be useful for using code generated by GenieBuilder e.g., 
#though it should be noted that InteractiveSlides.jl does not make use of Genie HTML parsing, and as such not all such-generated code will be directly usable)
#It thus often may be preferable/necessary to use the functions supplied by Genie, Stipple and StippleUI (see code below).

@simpleslide(h1("InteractiveSlides.jl is powered by the <a href=https://genieframework.com>Genie framework</a>"), 
    iframe(src = "https://genieframework.com", width="90%", height="90%"),
)

@slide(
    h1("You can thus use web technologies to create your slide"), 
    row(class = "items-center justify-around",
    [cell(size=1), 
     cell(p("For example, this slide is responsive. The picture only shows for wide screens (try resizing the window)")),
     autocell(img(src = "img/samplepic.jpg", style = "max-width: 45vmax", class = "gt-sm"))]
    )
)

@simpleslide(h1("This slide has vertically centered content"), 
    simplelist(
        "Try",
        "resizing", simplelist("the", "window")), 
    img(src = "img/samplepic.jpg", style = "max-height: 60vh"),
title = "Vertically centered content"
)

@simpleslide(h1("InteractiveSlides.jl makes creating presentations a breeze"),
    simplelist(
        "Plus, it provides gimmicks such as a timer!",
        "In this presentation, you can see the timer in the header (top right)",
        "You can control it with hotkeys",
        simplelist( """"d" starts a countdown of the timer""", 
                    """"u" counts up""",
                    """"p" pauses the timer""")), 
title = "Timer"
)

@simpleslide(h1("How does it work?"), 
    img(src = "img/scheme.png", style = "height: 90%"),
)

pmodel.files[] = [filedict(dirname(@__DIR__))] #used by draggable_tree() below (referred to by :files)
@slide(h1("Let's look at the project folder of this presentation (click on the folder!)"), 
    row([

    draggabletree(:files; style = "font-size:0.75rem"),

    Html.div([
    pre(code_startapp),
    @linktoslide("Click here if you saw enough code for now", "+= 1")
    ],@show_from_to(2, 2, true, false)),

    pre(code_InteractiveSlidesDemos, @show_from_to(3, 3)),

    pre(code_content, @appear_on(4)),

    ], class = "justify-evenly"),
class = "scroll-always", num_states = 4
)

@slide(h1("This is what you might typically be doing:"), 
    spacer("1vw"),
    row([
    cell([
        h2("Step 1: Save picture"),
        img(src = "img/fromPowerpoint.jpg", style = "width: 90%"),
        ], class = "text-center", size = 6),
    cell([
        h2("Step 2: Add code to project files"),
        pre(code(
            """@simpleslide(
                    h1("What is 'behind' 
                    this presentation?"), 
                    img(src = "img/scheme.jpg", 
                        style = "max-height: 60vh")
                )"""
        , class = "language-julia hljs", style = "width: 90%; margin:auto")),
        ], size = 6),
    ]),
title = "Creating slides is easy"
)

@slide(h1("This means you can use Git and GitHub!"), 
    spacer("1vw"),
    row([
        autocell(img(src = "img/commits.jpg", style = "max-height: 70vh")),
        autocell(a("GitHub repository of this presentation", href = "https://github.com/GlobalClimateForum/InteractiveSlidesDemos"))
    ], class = "items-center justify-evenly"),
    title = "Git and GitHub!",
)

return slides
end