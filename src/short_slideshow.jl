function gen_content(pmodel::PresentationModel, params::Dict)
slides = Slide[]
num_teams = params[:num_teams] #requires passing reset=1 as URL argument upon change in settings
team_id = params[:team_id]::Int
####### custom code goes below ######

pd(name) = PlotData(
    x = 1:12,
    y = (1:12)/5,
    name = name,
    plot = "bar",
)

teamsdata = [pd(string("Dummy Team ", t_id)) for t_id in 1:num_teams]

plotdata = @use_field!("VectorPlotData", init_val = deepcopy(teamsdata))
plotconfig = @use_field!("PlotConfig")
plotlayout = @use_field!("PlotLayout")
choice = @use_fields!("Vector", init_val = ["Nothing"])
possible_choices = @use_field!("Vector", init_val = ["Nothing", "Increase", "Decrease", "Sine"])

if params[:init] #Handlers
for t_id in 1:num_teams
    new_handler(choice[t_id]) do choice
        y = teamsdata[t_id].y
        x = 1:12
        if choice == ["Increase"]
            y += x./12
        elseif choice == ["Decrease"]
            y -= x./12
        elseif choice == ["Sine"]
            y += sin.(x.*pi./6)
        end
        plotdata.ref[t_id].y = y
        notify(plotdata.ref)
    end
end
end

@titleslide(
"""<h1>Hello team $team_id</h1> 
   <p>(you can switch to team 2 by visiting 
   <a href="http://127.0.0.1:8080/2">http://127.0.0.1:8080/2</a>).</p>""", 
) 
#As you can see above, you can directly write html strings (which may be useful for using code generated by GenieBuilder e.g.)
#However, InteractiveSlides does not parse strings (as opposed to GenieBuilder), and it thus often may be preferable/necessary to use the functions supplied by Genie, Stipple and StippleUI (see code below).

@slide(
    h1("Decision time"),
    row(class = "flex-center", img(src = "img/samplepic.jpg")),
    row(class = "flex-center", cell(class = "col-2",
    select(choice[team_id].sym, options = possible_choices.sym); size = 2
    )),
)

@slide(
    h1("Plot slide"),
    plot(plotdata.sym, layout = plotlayout.sym, config = plotconfig.sym),
)

auxUI = [quasar(:header, quasar(:toolbar, navcontrols(team_id))),
        quasar(:footer, [quasar(:separator), quasar(:toolbar, 
        [space(), slide_id(team_id)])], iftitleslide(slides, team_id)),
        menu_slides(slides, team_id, (id, title) -> string(id) * ": " * title)]

return slides, auxUI
end